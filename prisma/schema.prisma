// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id          Int      @id @default(autoincrement())
  nome        String
  email       String   @unique
  senhaHash   String
  dataCriacao DateTime @default(now())
  contas      Conta[]
  orcamentos  Orcamento[]
  metas       MetaFinanceira[]
}

model Conta {
  id     Int      @id @default(autoincrement())
  nome   String
  saldo  Float
  tipo   String
  usuarioId   Int
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
  transacoes  Transacao[]
}

model Transacao {
  id         Int      @id @default(autoincrement())
  valor      Float
  data       DateTime @default(now())
  tipo       String
  contaId    Int
  conta      Conta   @relation(fields: [contaId], references: [id])
  categoriaId Int
  categoria  Categoria @relation(fields: [categoriaId], references: [id])
}

model Categoria {
  id        Int      @id @default(autoincrement())
  nome      String
  descricao String?
  transacoes Transacao[]
  orcamentos  Orcamento[]
}

model Orcamento {
  id           Int      @id @default(autoincrement())
  valorLimite  Float
  periodo      String
  usuarioId    Int
  usuario      Usuario   @relation(fields: [usuarioId], references: [id])
  categoriaId  Int
  categoria    Categoria @relation(fields: [categoriaId], references: [id])
}

model MetaFinanceira {
  id           Int      @id @default(autoincrement())
  nome         String
  valorMeta    Float
  dataLimite   DateTime
  usuarioId    Int
  usuario      Usuario @relation(fields: [usuarioId], references: [id])
}
